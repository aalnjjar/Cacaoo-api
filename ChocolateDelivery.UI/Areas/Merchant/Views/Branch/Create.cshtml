@model SM_Restaurant_Branches

@section CSS{
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.7.14/css/bootstrap-datetimepicker.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/timepicker/1.3.5/jquery.timepicker.min.css" />
}

<!-- container -->
<div class="main-container container-fluid">

    <!-- breadcrumb -->
    <div class="breadcrumb-header justify-content-between">
        <div class="my-auto">
            <div class="d-flex">
                <h4 class="content-title mb-0 my-auto">Home</h4>
                <span class="text-muted mt-1 tx-13 ms-2 mb-0">/Branch</span>
            </div>
        </div>

    </div>
    <!-- breadcrumb -->
    <!-- row -->
    <div class="row row-sm">

        <div class="col-lg-12 col-xl-12 col-md-12 col-sm-12">
            <div class="card  box-shadow-0 ">
                <div class="card-header">
                    <h4 class="card-title mb-1"></h4>
                    <p class="mb-2"></p>
                </div>
                <div class="card-body pt-0">
                    <form method="post" enctype="multipart/form-data">
                        <div class="">

                            <div class="row row-sm mb-3">
                                <div class="col-sm-4">

                                    @await Component.InvokeAsync("UCLabel",new{labelId = 190})
                                    @await Component.InvokeAsync("UCTextBox", new UCProperties {
                                    Id="Branch_Name_E",CSSClass="form-control",Placeholder="Enter Branch Name",Value=Model != null ?Model.Branch_Name_E.ToString() :"",Is_Required=true,Error_Label_Id=56
                                    })
                                </div>
                                <div class="col-sm-4">

                                    @await Component.InvokeAsync("UCLabel",new{labelId = 191})
                                    @await Component.InvokeAsync("UCTextBox", new UCProperties {
                                    Id="Branch_Name_A",CSSClass="form-control",Placeholder="Enter Branch Name(Ar)",Value=Model != null ?Model.Branch_Name_A != null?Model.Branch_Name_A.ToString():"" :"",
                                    })
                                </div>

                            </div>


                            <div class="row row-sm mb-3">
                                <div class="col-sm-6">

                                    @await Component.InvokeAsync("UCLabel",new{labelId = 26})
                                    @await Component.InvokeAsync("UCTextBox", new UCProperties {
                                    Id="Address_E",CSSClass="form-control",Placeholder="Enter Address",Value=Model != null ?Model.Address_E != null?Model.Address_E.ToString():"" :"",Element_Type=Form_Element_Types.MultiLine
                                    })
                                </div>
                                <div class="col-sm-6">

                                    @await Component.InvokeAsync("UCLabel",new{labelId = 39})
                                    @await Component.InvokeAsync("UCTextBox", new UCProperties {
                                    Id="Address_A",CSSClass="form-control",Placeholder="Enter Address(Ar)",Value=Model != null ?Model.Address_A != null?Model.Address_A.ToString():"" :"",Element_Type=Form_Element_Types.MultiLine
                                    })
                                </div>

                            </div>
                            <div class="row row-sm mb-3">
                                <div class="col-sm-4">

                                    @await Component.InvokeAsync("UCLabel",new{labelId = 1})
                                    @await Component.InvokeAsync("UCTextBox", new UCProperties {
                                    Id="Username",CSSClass="form-control",Placeholder="Enter Username",Value=Model != null ?Model.Username.ToString() :"",Is_Required=true,Error_Label_Id=187
                                    })
                                </div>
                                <div class="col-sm-4">

                                    @await Component.InvokeAsync("UCLabel",new{labelId = 2})
                                    @await Component.InvokeAsync("UCTextBox", new UCProperties {
                                    Id="Password",CSSClass="form-control",Placeholder="Enter Password",Value=Model != null ?Model.Password != null?Model.Password.ToString():"" :"",Is_Required=true,Error_Label_Id=186
                                    })
                                </div>

                            </div>
                            <div class="row row-sm mb-3">

                                <div class="col-sm-4">

                                    @await Component.InvokeAsync("UCLabel",new{labelId = 37})
                                    @await Component.InvokeAsync("UCTextBox", new UCProperties {
                                    Id="Latitude",CSSClass="form-control",Placeholder="Enter Latitude",Value=Model != null ?Model.Latitude != null?Model.Latitude.ToString():"" :"",
                                    })
                                </div>
                                <div class="col-sm-4">

                                    @await Component.InvokeAsync("UCLabel",new{labelId = 38})
                                    @await Component.InvokeAsync("UCTextBox", new UCProperties {
                                    Id="Longitude",CSSClass="form-control",Placeholder="Enter Longitude",Value=Model != null ?Model.Longitude != null?Model.Longitude.ToString():"" :"",
                                    })
                                </div>
                            </div>
                            <div class="row row-sm mb-3">


                                <div class="col-sm-4">

                                    @await Component.InvokeAsync("UCLabel",new{labelId = 48})
                                    @await Component.InvokeAsync("UCTextBox", new UCProperties {
                                    Id="Opening_Time_String",CSSClass="form-control timepicker",Placeholder="Select Opening Time",Value=Model != null ?Model.Opening_Time_String != null?Model.Opening_Time_String.ToString():"" :"",
                                    })
                                </div>
                                <div class="col-sm-4">

                                    @await Component.InvokeAsync("UCLabel",new{labelId = 49})
                                    @await Component.InvokeAsync("UCTextBox", new UCProperties {
                                    Id="Closing_Time_String",CSSClass="form-control timepicker",Placeholder="Select Closing Time",Value=Model != null ?Model.Closing_Time_String != null?Model.Closing_Time_String.ToString():"" :"",
                                    })
                                </div>
                            </div>
                            <!-- row closed -->
                            <div class="">
                                <div class="">
                                    @Html.CheckBox("Show",true)
                                    @*  @Html.CheckBox("Show", true)*@
                                    @*  <input type="checkbox" asp-for="Show">*@
                                    @await Component.InvokeAsync("UCLabel",new{labelId = 7,cssClass=" mt-1"})

                                </div>
                            </div>
                            <div class="row row-sm mb-3">
                                <div class="col-sm-12">
                                    <div id="dvMap" style="height: 400px">
                                    </div>
                                </div>
                            </div>
                        </div>

                        @await Component.InvokeAsync("UCLabel",new{labelId = 8,cssClass="btn btn-primary mt-3 mb-0",userControlType="Button"})
                        <a href="/Merchant/List/@ViewBag.List_Id" class="btn btn-dark mt-3 mb-0">Cancel</a>
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <!-- row -->


</div>
<!-- Container closed -->
@section  Scripts{
    <!-- Internal Select2.min js -->
    <script src="~/assets/plugins/select2/js/select2.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.7.14/js/bootstrap-datetimepicker.min.js"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC4NjamvZ464M7aKgpOC7wbNvoVhfORHDE"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/timepicker/1.3.5/jquery.timepicker.min.js?ver=1.5.92"></script>
    @await Html.PartialAsync("/Views/Shared/_ValidationScriptsPartial.cshtml")
    <script type="text/javascript">
        // Initialize and add the map
        let map;
        let marker;
        $(document).ready(function () {
            $('.select2').select2({
                placeholder: 'Choose one',
                allowClear: true,
                searchInputPlaceholder: 'Search'
            });
            $('.select2-no-search').select2({
                minimumResultsForSearch: Infinity,
                placeholder: 'Choose one'
            });
            $('.boot-datetimepicker').datetimepicker({
                useCurrent: false, //Important! See issue #1075
                icons: {
                    time: "fa fa-clock-o",
                    date: "fa fa-calendar",
                    up: "fa fa-arrow-up",
                    down: "fa fa-arrow-down"
                },
                format: 'hh:mm a'
            });
            $('.timepicker').timepicker({
                timeFormat: 'hh:mm a',
                interval: 60,
                minTime: '8',
                maxTime: '11:00pm',
                //defaultTime: '11',
                startTime: '08:00',
                dynamic: false,
                dropdown: true,
                scrollbar: true
            });
        });
        initMap();
        function initMap() {
            map = new google.maps.Map(document.getElementById('dvMap'), {
                center: { lat: @ViewBag.Latitude, lng: @ViewBag.Longitude },
                zoom: 13
            });
            var myLatlng = new google.maps.LatLng(@ViewBag.Latitude, @ViewBag.Longitude);
            marker = new google.maps.Marker({
                position: myLatlng,
                map: map,
                title: "Selected Location"
            });

            google.maps.event.addListener(marker, 'click', function (event) {
                var lat = event.latLng.lat();
                var lng = event.latLng.lng();
                //save lat and lng to database
                console.log("Lat:"+lat + " , lng:"+lng);
            });
            // This event listener calls addMarker() when the map is clicked.
            google.maps.event.addListener(map, 'click', function (e) {
                placeMarker(e.latLng, map);
            });
        }
       

        function placeMarker(position, map) {
            marker.setMap(null);
             marker = new google.maps.Marker({
                position: position,
                map: map
            });
            map.panTo(position);
            console.log("lat:" + position.lat() + ", lng:" + position.lng());
            $('#Latitude').val(position.lat());
            $('#Longitude').val(position.lng());
        }
    </script>

}
